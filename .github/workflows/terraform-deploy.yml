name: Terraform Infrastructure Deploy

on:
  push:
    branches:
      - dev
      - staging
      - production
  pull_request:
    branches:
      - staging
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production
      action:
        description: 'Pipeline action'
        required: true
        default: 'plan-and-apply'
        type: choice
        options:
        - setup-only
        - plan-only
        - plan-and-apply
        - destroy
      skip_setup:
        description: 'Skip setup stage (if backends already exist)'
        required: false
        default: false
        type: boolean
      create_promotion_pr:
        description: 'Create PR to next environment after successful deployment'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.6.0"
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  setup-backends:
    name: Setup Terraform Backends
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'setup-only') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-and-apply' && github.event.inputs.skip_setup != 'true') ||
      (github.event_name == 'push')
    outputs:
      setup-success: ${{ steps.setup-result.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Configure Git Authentication
        run: |
          git config --global url."https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          mkdir -p ~/.git
          echo "https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com" > ~/.git-credentials
          chmod 600 ~/.git-credentials
          
          echo "GIT_CONFIG_GLOBAL=$HOME/.gitconfig" >> $GITHUB_ENV
          echo "GIT_ASKPASS=echo" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Determine target environment
        id: target-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              "dev") ENV="dev" ;;
              "staging") ENV="staging" ;;
              "production") ENV="production" ;;
              *) ENV="dev" ;;
            esac
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Target environment: $ENV"

      - name: Setup backend configurations
        id: setup-backend
        run: |
          chmod +x scripts/setup-backend-per-account.sh
          TARGET_ENV="${{ steps.target-env.outputs.environment }}"
          
          # Get account ID for the target environment
          TARGET_ACCOUNT_ID=$(jq -r ".${TARGET_ENV}.account_id" config/aws-accounts.json)
          if [ "$TARGET_ACCOUNT_ID" = "null" ] || [ -z "$TARGET_ACCOUNT_ID" ]; then
            echo "Error: Account ID not found for environment $TARGET_ENV"
            exit 1
          fi
          echo "Setting up backend for environment: $TARGET_ENV (Account: $TARGET_ACCOUNT_ID)"
          bash scripts/setup-backend-per-account.sh "$TARGET_ACCOUNT_ID"
          echo "Updated backend files:"
          ls -la shared/backend-*.hcl
          if [ -f shared/backend-${TARGET_ENV}.hcl ]; then 
            echo "Backend configuration for $TARGET_ENV:"
            cat shared/backend-${TARGET_ENV}.hcl
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
          GIT_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-backends
          path: shared/backend-*.hcl
          retention-days: 7

      - name: Set setup success output
        id: setup-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      tfvars-file: ${{ steps.env.outputs.tfvars-file }}
      needs-approval: ${{ steps.env.outputs.needs-approval }}
    steps:
      - name: Determine environment from branch or input
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              "dev")
                ENV="dev"
                ;;
              "staging")
                ENV="staging"
                ;;
              "production")
                ENV="production"
                ;;
              *)
                ENV="dev"
                ;;
            esac
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          # Set tfvars file based on environment
          case "$ENV" in
            "dev")
              echo "tfvars-file=dev-terraform.tfvars" >> $GITHUB_OUTPUT
              echo "needs-approval=false" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "tfvars-file=stg-terraform.tfvars" >> $GITHUB_OUTPUT
              echo "needs-approval=true" >> $GITHUB_OUTPUT
              ;;
            "production")
              echo "tfvars-file=prod-terraform.tfvars" >> $GITHUB_OUTPUT
              echo "needs-approval=true" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "Determined environment: $ENV"

  terraform-plan:
    name: Terraform Plan - ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup-backends, determine-environment]
    if: |
      always() && 
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-and-apply') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-only') ||
        (github.event_name == 'push') ||
        (github.event_name == 'pull_request')
      ) &&
      (
        (needs.setup-backends.result == 'success') ||
        (needs.setup-backends.result == 'skipped' && github.event_name == 'workflow_dispatch' && github.event.inputs.skip_setup == 'true') ||
        (github.event_name == 'push') ||
        (github.event_name == 'pull_request')
      )
    outputs:
      plan-success: ${{ steps.plan-result.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Configure Git Authentication
        run: |
          git config --global url."https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          mkdir -p ~/.git
          echo "https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com" > ~/.git-credentials
          chmod 600 ~/.git-credentials
          
          echo "GIT_CONFIG_GLOBAL=$HOME/.gitconfig" >> $GITHUB_ENV
          echo "GIT_ASKPASS=echo" >> $GITHUB_ENV

      - name: Download backend artifacts
        if: needs.setup-backends.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: terraform-backends
          path: shared/
        continue-on-error: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Assume target account role
        run: |
          TARGET_ACCOUNT_ID=$(jq -r ".${{ needs.determine-environment.outputs.environment }}.account_id" config/aws-accounts.json)
          if [ "$TARGET_ACCOUNT_ID" = "null" ] || [ -z "$TARGET_ACCOUNT_ID" ]; then
            echo "Error: Account ID not found for environment ${{ needs.determine-environment.outputs.environment }}"
            exit 1
          fi
          
          TARGET_ROLE_ARN="arn:aws:iam::${TARGET_ACCOUNT_ID}:role/OrganizationAccountAccessRole"
          
          TARGET_CREDENTIALS=$(aws sts assume-role \
            --role-arn $TARGET_ROLE_ARN \
            --role-session-name github-actions-${{ needs.determine-environment.outputs.environment }}-${{ github.run_id }} \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text)
          
          echo "AWS_ACCESS_KEY_ID=$(echo $TARGET_CREDENTIALS | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TARGET_CREDENTIALS | cut -d' ' -f2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TARGET_CREDENTIALS | cut -d' ' -f3)" >> $GITHUB_ENV

      - name: Check backend configuration
        run: |
          BACKEND_FILE="shared/backend-${{ needs.determine-environment.outputs.environment }}.hcl"
          if [ ! -f "$BACKEND_FILE" ]; then
            echo "❌ Backend configuration file not found: $BACKEND_FILE"
            echo "This usually means the setup stage was skipped or failed."
            echo "Available backend files:"
            ls -la shared/backend-*.hcl 2>/dev/null || echo "No backend files found"
            exit 1
          fi
          
          # Check if backend file has placeholder values
          if grep -q "REPLACE_WITH_ACTUAL" "$BACKEND_FILE"; then
            echo "❌ Backend configuration contains placeholder values"
            echo "Content of $BACKEND_FILE:"
            cat "$BACKEND_FILE"
            echo "The setup stage needs to run first to replace these placeholders."
            exit 1
          fi
          
          echo "✅ Backend configuration looks good:"
          cat "$BACKEND_FILE"

      - name: Terraform Init
        run: |
          terraform init -backend-config=shared/backend-${{ needs.determine-environment.outputs.environment }}.hcl
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
          GIT_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Terraform Workspace
        run: |
          terraform workspace select ${{ needs.determine-environment.outputs.environment }} || terraform workspace new ${{ needs.determine-environment.outputs.environment }}

      - name: Terraform Plan
        id: plan
        run: |
          if [ ! -f tfvars/${{ needs.determine-environment.outputs.tfvars-file }} ]; then
            echo "Error: tfvars file not found: tfvars/${{ needs.determine-environment.outputs.tfvars-file }}"
            exit 1
          fi
          
          terraform plan -var-file=tfvars/${{ needs.determine-environment.outputs.tfvars-file }} -out=tfplan
          
          # Show plan summary
          terraform show -no-color tfplan > plan-output.txt
          echo "## Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tfvars File:** ${{ needs.determine-environment.outputs.tfvars-file }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Plan Output:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -50 plan-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: |
            tfplan
            plan-output.txt
          retention-days: 7

      - name: Set plan success output
        id: plan-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  terraform-apply:
    name: Terraform Apply - ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup-backends, determine-environment, terraform-plan]
    if: |
      always() && 
      needs.terraform-plan.outputs.plan-success == 'true' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-and-apply') ||
        (github.event_name == 'push')
      ) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.action != 'plan-only')
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.outputs.outputs.alb_url }}
    outputs:
      deploy-success: ${{ steps.apply-result.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Configure Git Authentication
        run: |
          git config --global url."https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          mkdir -p ~/.git
          echo "https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com" > ~/.git-credentials
          chmod 600 ~/.git-credentials
          
          echo "GIT_CONFIG_GLOBAL=$HOME/.gitconfig" >> $GITHUB_ENV
          echo "GIT_ASKPASS=echo" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download backend artifacts
        if: needs.setup-backends.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: terraform-backends
          path: shared/
        continue-on-error: true

      - name: Download plan artifacts
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ needs.determine-environment.outputs.environment }}
          path: ./

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Assume target account role
        run: |
          TARGET_ACCOUNT_ID=$(jq -r ".${{ needs.determine-environment.outputs.environment }}.account_id" config/aws-accounts.json)
          TARGET_ROLE_ARN="arn:aws:iam::${TARGET_ACCOUNT_ID}:role/OrganizationAccountAccessRole"
          
          TARGET_CREDENTIALS=$(aws sts assume-role \
            --role-arn $TARGET_ROLE_ARN \
            --role-session-name github-actions-apply-${{ needs.determine-environment.outputs.environment }}-${{ github.run_id }} \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text)
          
          echo "AWS_ACCESS_KEY_ID=$(echo $TARGET_CREDENTIALS | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TARGET_CREDENTIALS | cut -d' ' -f2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TARGET_CREDENTIALS | cut -d' ' -f3)" >> $GITHUB_ENV

      - name: Check backend configuration
        run: |
          BACKEND_FILE="shared/backend-${{ needs.determine-environment.outputs.environment }}.hcl"
          if [ ! -f "$BACKEND_FILE" ]; then
            echo "❌ Backend configuration file not found: $BACKEND_FILE"
            echo "Available backend files:"
            ls -la shared/backend-*.hcl 2>/dev/null || echo "No backend files found"
            exit 1
          fi
          
          # Check if backend file has placeholder values
          if grep -q "REPLACE_WITH_ACTUAL" "$BACKEND_FILE"; then
            echo "❌ Backend configuration contains placeholder values"
            echo "Content of $BACKEND_FILE:"
            cat "$BACKEND_FILE"
            echo "The setup stage needs to run first to replace these placeholders."
            exit 1
          fi
          
          echo "✅ Backend configuration looks good:"
          cat "$BACKEND_FILE"

      - name: Terraform Init
        run: |
          terraform init -backend-config=shared/backend-${{ needs.determine-environment.outputs.environment }}.hcl
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
          GIT_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Terraform Workspace
        run: |
          terraform workspace select ${{ needs.determine-environment.outputs.environment }}

      - name: Terraform Apply
        id: apply
        run: |
          if [ -f tfplan ]; then
            echo "Using existing plan file..."
            terraform apply -auto-approve tfplan
          else
            echo "No plan file found, running apply with tfvars..."
            terraform apply -auto-approve -var-file=tfvars/${{ needs.determine-environment.outputs.tfvars-file }}
          fi

      - name: Get outputs
        id: outputs
        run: |
          terraform output -json > outputs.json
          
          # Extract ALB URLs if available
          ALB_ENDPOINTS=$(terraform output -json alb_endpoints 2>/dev/null || echo '{}')
          if [ "$ALB_ENDPOINTS" != "{}" ]; then
            FIRST_ALB_URL=$(echo $ALB_ENDPOINTS | jq -r 'to_entries | .[0].value // empty')
            if [ -n "$FIRST_ALB_URL" ]; then
              echo "alb_url=http://$FIRST_ALB_URL" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Create deployment summary
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add ALB endpoints if available
          if [ "$ALB_ENDPOINTS" != "{}" ]; then
            echo "### 🌐 Load Balancer Endpoints:" >> $GITHUB_STEP_SUMMARY
            echo $ALB_ENDPOINTS | jq -r 'to_entries[] | "- **\(.key)**: http://\(.value)"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add instance details if available
          INSTANCES=$(terraform output -json instance_details 2>/dev/null || echo '{}')
          if [ "$INSTANCES" != "{}" ]; then
            echo "### 🖥️ EC2 Instances:" >> $GITHUB_STEP_SUMMARY
            echo $INSTANCES | jq -r 'to_entries[] | "- **\(.key)**: \(.value.instance_id) (\(.value.private_ip))"' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ needs.determine-environment.outputs.environment }}
          path: outputs.json
          retention-days: 30

      - name: Set apply success output
        id: apply-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  terraform-destroy:
    name: Terraform Destroy - ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [setup-backends, determine-environment]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: destroy-${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Configure Git Authentication
        run: |
          git config --global url."https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          mkdir -p ~/.git
          echo "https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com" > ~/.git-credentials
          chmod 600 ~/.git-credentials
          
          echo "GIT_CONFIG_GLOBAL=$HOME/.gitconfig" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download backend artifacts
        if: needs.setup-backends.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: terraform-backends
          path: shared/
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Assume target account role
        run: |
          TARGET_ACCOUNT_ID=$(jq -r ".${{ needs.determine-environment.outputs.environment }}.account_id" config/aws-accounts.json)
          TARGET_ROLE_ARN="arn:aws:iam::${TARGET_ACCOUNT_ID}:role/OrganizationAccountAccessRole"
          
          TARGET_CREDENTIALS=$(aws sts assume-role \
            --role-arn $TARGET_ROLE_ARN \
            --role-session-name github-actions-destroy-${{ needs.determine-environment.outputs.environment }}-${{ github.run_id }} \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text)
          
          echo "AWS_ACCESS_KEY_ID=$(echo $TARGET_CREDENTIALS | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TARGET_CREDENTIALS | cut -d' ' -f2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TARGET_CREDENTIALS | cut -d' ' -f3)" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          terraform init -backend-config=shared/backend-${{ needs.determine-environment.outputs.environment }}.hcl
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
          GIT_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Terraform Workspace
        run: |
          terraform workspace select ${{ needs.determine-environment.outputs.environment }}

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -var-file=tfvars/${{ needs.determine-environment.outputs.tfvars-file }}

  production-approval:
    name: Production Terraform Apply Approval
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-plan]
    if: |
      always() && 
      needs.determine-environment.outputs.environment == 'production' &&
      needs.terraform-plan.outputs.plan-success == 'true' &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.action == 'plan-and-apply'
    environment: 
      name: production-apply-approval
    steps:
      - name: Production Apply Approval Required
        run: |
          echo "## 🔒 Production Apply Approval" >> $GITHUB_STEP_SUMMARY
          echo "This step requires manual approval before applying changes to production." >> $GITHUB_STEP_SUMMARY
          echo "Please review the terraform plan and approve if the changes are correct." >> $GITHUB_STEP_SUMMARY
          echo "approved=true" >> $GITHUB_OUTPUT

  create-promotion-pr:
    name: Create Promotion PR
    runs-on: ubuntu-latest
    needs: [determine-environment, terraform-apply]
    if: |
      always() && 
      needs.terraform-apply.outputs.deploy-success == 'true' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_promotion_pr == 'true') ||
        (github.event_name == 'push' && github.ref_name == 'dev') ||
        (github.event_name == 'push' && github.ref_name == 'staging')
      ) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.action != 'destroy')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Determine promotion target
        id: promotion
        run: |
          SOURCE_ENV="${{ needs.determine-environment.outputs.environment }}"
          
          case $SOURCE_ENV in
            "dev")
              TARGET_ENV="staging"
              ;;
            "staging")
              TARGET_ENV="production"
              ;;
            "production")
              TARGET_ENV=""
              ;;
            *)
              TARGET_ENV=""
              ;;
          esac
          
          echo "source_env=$SOURCE_ENV" >> $GITHUB_OUTPUT
          echo "target_env=$TARGET_ENV" >> $GITHUB_OUTPUT
          
          if [ -z "$TARGET_ENV" ]; then
            echo "No promotion target for $SOURCE_ENV environment"
            echo "skip_promotion=true" >> $GITHUB_OUTPUT
          else
            echo "Promotion: $SOURCE_ENV → $TARGET_ENV"
            echo "skip_promotion=false" >> $GITHUB_OUTPUT
          fi

      - name: Create promotion PR
        if: steps.promotion.outputs.skip_promotion == 'false'
        run: |
          SOURCE_ENV="${{ steps.promotion.outputs.source_env }}"
          TARGET_ENV="${{ steps.promotion.outputs.target_env }}"
          
          # Create PR body
          PR_BODY="## 🚀 Infrastructure Promotion

          **Source Environment:** $SOURCE_ENV
          **Target Environment:** $TARGET_ENV
          **Source Commit:** ${{ github.sha }}
          **Workflow Run:** ${{ github.run_id }}
          **Deployment Status:** ✅ $SOURCE_ENV deployment completed successfully

          ### 📋 What's Being Promoted

          This PR promotes infrastructure changes from $SOURCE_ENV to $TARGET_ENV.

          ### 🚀 Next Steps

          1. **Review** all infrastructure changes
          2. **Approve and merge** to trigger $TARGET_ENV deployment

          ---
          *This PR was created automatically after successful $SOURCE_ENV deployment.*"
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --base $TARGET_ENV --head $SOURCE_ENV --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [ -n "$EXISTING_PR" ]; then
            echo "PR already exists: #$EXISTING_PR"
            echo "Updating existing PR..."
            echo "$PR_BODY" | gh pr edit $EXISTING_PR --title "🚀 Promote infrastructure: $SOURCE_ENV → $TARGET_ENV" --body-file -
          else
            echo "Creating new PR..."
            echo "$PR_BODY" | gh pr create \
              --base $TARGET_ENV \
              --head $SOURCE_ENV \
              --title "🚀 Promote infrastructure: $SOURCE_ENV → $TARGET_ENV" \
              --body-file - \
              --label "promotion,$TARGET_ENV,infrastructure,automated"
          fi
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Add promotion summary
        if: steps.promotion.outputs.skip_promotion == 'false'
        run: |
          echo "## 🚀 Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source Environment:** ${{ steps.promotion.outputs.source_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ steps.promotion.outputs.target_env }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status:** Promotion PR created successfully" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Next Step:** Review and merge the PR to deploy to ${{ steps.promotion.outputs.target_env }}" >> $GITHUB_STEP_SUMMARY

      - name: No promotion needed
        if: steps.promotion.outputs.skip_promotion == 'true'
        run: |
          echo "## ℹ️ No Promotion Available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.promotion.outputs.source_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** This is the final environment in the promotion chain" >> $GITHUB_STEP_SUMMARY