name: Terraform Infrastructure Deploy (Clean)

on:
  push:
    branches:
      - dev
      - staging
      - production
  pull_request:
    branches:
      - staging
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production
      action:
        description: 'Pipeline action'
        required: true
        default: 'plan-and-apply'
        type: choice
        options:
        - setup-only
        - plan-only
        - plan-and-apply
        - destroy
      skip_setup:
        description: 'Skip setup stage (if backends already exist)'
        required: false
        default: false
        type: boolean
      create_promotion_pr:
        description: 'Create PR to next environment after successful deployment'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.6.0"
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  setup-backends:
    name: Setup Terraform Backends
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'setup-only') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-and-apply' && github.event.inputs.skip_setup != 'true') ||
      (github.event_name == 'push')
    outputs:
      setup-success: ${{ steps.setup-result.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Determine target environment
        id: target-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              "dev") ENV="dev" ;;
              "staging") ENV="staging" ;;
              "production") ENV="production" ;;
              *) ENV="dev" ;;
            esac
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "Target environment: $ENV"

      - name: Setup backend configurations
        run: |
          chmod +x scripts/setup-backend-per-account.sh
          TARGET_ENV="${{ steps.target-env.outputs.environment }}"
          
          TARGET_ACCOUNT_ID=$(jq -r ".${TARGET_ENV}.account_id" config/aws-accounts.json)
          if [ "$TARGET_ACCOUNT_ID" = "null" ] || [ -z "$TARGET_ACCOUNT_ID" ]; then
            echo "Error: Account ID not found for environment $TARGET_ENV"
            exit 1
          fi
          echo "Setting up backend for environment: $TARGET_ENV (Account: $TARGET_ACCOUNT_ID)"
          bash scripts/setup-backend-per-account.sh "$TARGET_ACCOUNT_ID"

      - name: Set setup success output
        id: setup-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [setup-backends]
    if: |
      always() && 
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-and-apply') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-only') ||
        (github.event_name == 'push') ||
        (github.event_name == 'pull_request')
      ) &&
      (needs.setup-backends.result == 'success' || github.event_name == 'push' || github.event_name == 'pull_request')
    outputs:
      plan-success: ${{ steps.plan-result.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              "dev") ENV="dev" ;;
              "staging") ENV="staging" ;;
              "production") ENV="production" ;;
              *) ENV="dev" ;;
            esac
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          terraform init -backend-config=shared/backend-${{ steps.env.outputs.environment }}.hcl

      - name: Terraform Plan
        run: |
          terraform plan -var-file=tfvars/${{ steps.env.outputs.environment }}-terraform.tfvars -out=tfplan

      - name: Set plan success output
        id: plan-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: |
      always() && 
      needs.terraform-plan.outputs.plan-success == 'true' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan-and-apply') ||
        (github.event_name == 'push')
      )
    outputs:
      deploy-success: ${{ steps.apply-result.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              "dev") ENV="dev" ;;
              "staging") ENV="staging" ;;
              "production") ENV="production" ;;
              *) ENV="dev" ;;
            esac
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          terraform init -backend-config=shared/backend-${{ steps.env.outputs.environment }}.hcl

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve tfplan

      - name: Set apply success output
        id: apply-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  create-promotion-pr:
    name: Create Promotion PR
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: |
      always() && 
      needs.terraform-apply.outputs.deploy-success == 'true' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.create_promotion_pr == 'true') ||
        (github.event_name == 'push')
      )
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Determine promotion target
        id: promotion
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SOURCE_ENV="${{ github.event.inputs.environment }}"
          else
            SOURCE_ENV="${{ github.ref_name }}"
          fi
          
          case $SOURCE_ENV in
            "dev") TARGET_ENV="staging" ;;
            "staging") TARGET_ENV="production" ;;
            *) TARGET_ENV="" ;;
          esac
          
          echo "source_env=$SOURCE_ENV" >> $GITHUB_OUTPUT
          echo "target_env=$TARGET_ENV" >> $GITHUB_OUTPUT
          
          if [ -z "$TARGET_ENV" ]; then
            echo "skip_promotion=true" >> $GITHUB_OUTPUT
          else
            echo "skip_promotion=false" >> $GITHUB_OUTPUT
          fi

      - name: Create promotion PR
        if: steps.promotion.outputs.skip_promotion == 'false'
        run: |
          SOURCE_ENV="${{ steps.promotion.outputs.source_env }}"
          TARGET_ENV="${{ steps.promotion.outputs.target_env }}"
          
          PR_BODY="## ðŸš€ Infrastructure Promotion

          **Source Environment:** $SOURCE_ENV
          **Target Environment:** $TARGET_ENV
          **Deployment Status:** âœ… $SOURCE_ENV deployment completed successfully

          ### ðŸš€ Next Steps
          1. Review all infrastructure changes
          2. Approve and merge to trigger $TARGET_ENV deployment"
          
          echo "$PR_BODY" | gh pr create \
            --base $TARGET_ENV \
            --head $SOURCE_ENV \
            --title "ðŸš€ Promote infrastructure: $SOURCE_ENV â†’ $TARGET_ENV" \
            --body-file - || echo "PR may already exist"
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}