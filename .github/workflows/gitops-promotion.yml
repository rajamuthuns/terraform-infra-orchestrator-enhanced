name: GitOps Branch Promotion Pipeline

on:
  push:
    branches: [dev, staging, production]
  pull_request:
    branches: [staging, production]
    types: [opened, synchronize, closed]

env:
  TF_VERSION: "1.6.0"
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  detect-environment:
    name: Detect Environment and Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      require_pr_approval: ${{ steps.detect.outputs.require_pr_approval }}
      require_terraform_approval: ${{ steps.detect.outputs.require_terraform_approval }}
      auto_deploy: ${{ steps.detect.outputs.auto_deploy }}
      promotion_target: ${{ steps.detect.outputs.promotion_target }}
      should_deploy: ${{ steps.detect.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect environment from branch
        id: detect
        run: |
          # Determine branch name
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
            IS_PR_MERGED="${{ github.event.pull_request.merged }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            IS_PR_MERGED="false"
          fi
          
          echo "Branch: $BRANCH_NAME"
          echo "Event: ${{ github.event_name }}"
          echo "PR Merged: $IS_PR_MERGED"
          
          # Map branch to environment
          case $BRANCH_NAME in
            "dev")
              ENVIRONMENT="dev"
              ;;
            "staging")
              ENVIRONMENT="staging"
              ;;
            "production")
              ENVIRONMENT="prod"
              ;;
            *)
              echo "Unknown branch: $BRANCH_NAME"
              exit 1
              ;;
          esac
          
          # Read configuration
          REQUIRE_PR_APPROVAL=$(jq -r ".environments.$ENVIRONMENT.require_pr_approval" config/gitops-environments.json)
          REQUIRE_TERRAFORM_APPROVAL=$(jq -r ".environments.$ENVIRONMENT.require_terraform_approval" config/gitops-environments.json)
          AUTO_DEPLOY=$(jq -r ".environments.$ENVIRONMENT.auto_deploy" config/gitops-environments.json)
          PROMOTION_TARGET=$(jq -r ".environments.$ENVIRONMENT.promotion_target" config/gitops-environments.json)
          
          # Determine if we should deploy
          SHOULD_DEPLOY="false"
          if [[ "${{ github.event_name }}" == "push" ]]; then
            SHOULD_DEPLOY="true"
          elif [[ "${{ github.event_name }}" == "pull_request" && "$IS_PR_MERGED" == "true" ]]; then
            SHOULD_DEPLOY="true"
          fi
          
          # Set outputs
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "require_pr_approval=$REQUIRE_PR_APPROVAL" >> $GITHUB_OUTPUT
          echo "require_terraform_approval=$REQUIRE_TERRAFORM_APPROVAL" >> $GITHUB_OUTPUT
          echo "auto_deploy=$AUTO_DEPLOY" >> $GITHUB_OUTPUT
          echo "promotion_target=$PROMOTION_TARGET" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "Environment: $ENVIRONMENT"
          echo "Should Deploy: $SHOULD_DEPLOY"
          echo "Promotion Target: $PROMOTION_TARGET"

  terraform-pipeline:
    name: Terraform Pipeline - ${{ needs.detect-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [detect-environment]
    if: needs.detect-environment.outputs.should_deploy == 'true'
    environment: 
      name: ${{ needs.detect-environment.outputs.environment }}
    outputs:
      deploy-success: ${{ steps.deploy-result.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Configure Git Authentication
        run: |
          git config --global url."https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global credential.helper store
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          mkdir -p ~/.git
          echo "https://${{ secrets.PRIVATE_REPO_TOKEN }}@github.com" > ~/.git-credentials
          chmod 600 ~/.git-credentials
          
          echo "GIT_CONFIG_GLOBAL=$HOME/.gitconfig" >> $GITHUB_ENV
          echo "GIT_ASKPASS=echo" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Assume target account role
        run: |
          TARGET_ACCOUNT_ID=$(jq -r ".${{ needs.detect-environment.outputs.environment }}.account_id" config/aws-accounts.json)
          if [ "$TARGET_ACCOUNT_ID" = "null" ] || [ -z "$TARGET_ACCOUNT_ID" ]; then
            echo "Error: Account ID not found for environment ${{ needs.detect-environment.outputs.environment }}"
            exit 1
          fi
          
          TARGET_ROLE_ARN="arn:aws:iam::${TARGET_ACCOUNT_ID}:role/OrganizationAccountAccessRole"
          
          TARGET_CREDENTIALS=$(aws sts assume-role \
            --role-arn $TARGET_ROLE_ARN \
            --role-session-name github-actions-${{ needs.detect-environment.outputs.environment }}-${{ github.run_id }} \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text)
          
          if [ $? -ne 0 ]; then
            echo "Error: Failed to assume role $TARGET_ROLE_ARN"
            exit 1
          fi
          
          echo "AWS_ACCESS_KEY_ID=$(echo $TARGET_CREDENTIALS | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $TARGET_CREDENTIALS | cut -d' ' -f2)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $TARGET_CREDENTIALS | cut -d' ' -f3)" >> $GITHUB_ENV

      - name: Terraform Init
        run: |
          cd environments/${{ needs.detect-environment.outputs.environment }}
          if [ ! -f ../../shared/backend-${{ needs.detect-environment.outputs.environment }}.hcl ]; then
            echo "Error: Backend configuration file not found"
            echo "Please run backend setup first"
            exit 1
          fi
          terraform init -backend-config=../../shared/backend-${{ needs.detect-environment.outputs.environment }}.hcl
        env:
          GITHUB_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Terraform Plan
        run: |
          cd environments/${{ needs.detect-environment.outputs.environment }}
          
          # Use environment-specific tfvars file
          TFVARS_FILE="${{ needs.detect-environment.outputs.environment }}-terraform.tfvars"
          
          if [ ! -f "$TFVARS_FILE" ]; then
            echo "Error: Environment-specific tfvars file not found: $TFVARS_FILE"
            echo "Expected files:"
            echo "  - dev-terraform.tfvars"
            echo "  - staging-terraform.tfvars" 
            echo "  - prod-terraform.tfvars"
            exit 1
          fi
          
          echo "Using tfvars file: $TFVARS_FILE"
          terraform plan -var-file=$TFVARS_FILE -out=tfplan

      - name: Terraform Apply (Non-Production)
        if: needs.detect-environment.outputs.require_terraform_approval == 'false'
        run: |
          cd environments/${{ needs.detect-environment.outputs.environment }}
          terraform apply -auto-approve tfplan

      - name: Terraform Apply (Production - Manual Approval)
        if: needs.detect-environment.outputs.require_terraform_approval == 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 1
          issue-title: "Production Terraform Apply Approval Required"
          issue-body: |
            Please review and approve the Terraform apply for production environment.
            
            **Environment:** ${{ needs.detect-environment.outputs.environment }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Using tfvars:** prod-terraform.tfvars
            
            Review the plan output above and approve if ready to deploy.

      - name: Terraform Apply (Production - After Approval)
        if: needs.detect-environment.outputs.require_terraform_approval == 'true'
        run: |
          cd environments/${{ needs.detect-environment.outputs.environment }}
          terraform apply -auto-approve tfplan

      - name: Set deploy success output
        id: deploy-result
        run: echo "success=true" >> $GITHUB_OUTPUT

  promote-environment:
    name: Promote to Next Environment
    runs-on: ubuntu-latest
    needs: [detect-environment, terraform-pipeline]
    if: |
      needs.terraform-pipeline.outputs.deploy-success == 'true' && 
      needs.detect-environment.outputs.promotion_target != 'null' &&
      needs.detect-environment.outputs.promotion_target != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Create selective promotion PR
        run: |
          SOURCE_ENV="${{ needs.detect-environment.outputs.environment }}"
          TARGET_ENV="${{ needs.detect-environment.outputs.promotion_target }}"
          BRANCH_NAME="promote-${SOURCE_ENV}-to-${TARGET_ENV}-${{ github.run_number }}"
          
          echo "Creating promotion from $SOURCE_ENV to $TARGET_ENV"
          
          # Create promotion branch from target environment branch
          git checkout $TARGET_ENV
          git checkout -b $BRANCH_NAME
          
          # GITOPS PROMOTION RULES:
          # Promote ALL files from source environment to target environment
          # All environment-specific configurations are now stored as separate tfvars files
          # (dev-terraform.tfvars, staging-terraform.tfvars, prod-terraform.tfvars)
          
          echo "Promoting all files from $SOURCE_ENV to $TARGET_ENV..."
          
          # Copy all files from source environment to target environment
          if [ -d "environments/$SOURCE_ENV" ]; then
            # Create target directory if it doesn't exist
            mkdir -p "environments/$TARGET_ENV"
            
            # Copy all files
            cp -r "environments/$SOURCE_ENV/"* "environments/$TARGET_ENV/"
            
            # Add all files to git
            git add "environments/$TARGET_ENV/"
            
            echo "Files promoted:"
            ls -la "environments/$TARGET_ENV/"
          else
            echo "ERROR: Source environment directory not found: environments/$SOURCE_ENV"
            exit 1
          fi
          
          # Verify that environment-specific tfvars files are present
          REQUIRED_TFVARS=(
            "dev-terraform.tfvars"
            "staging-terraform.tfvars"
            "prod-terraform.tfvars"
          )
          
          echo "Verifying environment-specific tfvars files are present..."
          for tfvars_file in "${REQUIRED_TFVARS[@]}"; do
            if [ -f "environments/$TARGET_ENV/$tfvars_file" ]; then
              echo "✅ Found: $tfvars_file"
            else
              echo "⚠️  Missing: $tfvars_file (this environment may not be configured)"
            fi
          done
          
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No infrastructure code changes to promote"
            echo "SKIP_PR=true" >> $GITHUB_ENV
          else
            # Commit the changes
            git commit -m "promote: infrastructure code from $SOURCE_ENV to $TARGET_ENV
            
            Source commit: ${{ github.sha }}
            Source environment: $SOURCE_ENV
            Target environment: $TARGET_ENV
            
            Changes:
            - Updated infrastructure code (main.tf, variables.tf, outputs.tf)
            - Preserved environment-specific configurations (terraform.tfvars)
            - Updated userdata scripts if present
            
            This promotion only includes infrastructure code changes.
            Environment-specific configurations remain unchanged."
            
            # Push the branch
            git push origin $BRANCH_NAME
            
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
            echo "SOURCE_ENV=$SOURCE_ENV" >> $GITHUB_ENV
            echo "TARGET_ENV=$TARGET_ENV" >> $GITHUB_ENV
          fi

      - name: Create promotion PR
        if: env.SKIP_PR != 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: ${{ env.TARGET_ENV }}
          title: "🚀 Promote infrastructure code: ${{ env.SOURCE_ENV }} → ${{ env.TARGET_ENV }}"
          body: |
            ## GitOps Environment Promotion
            
            **Source Environment:** ${{ env.SOURCE_ENV }}
            **Target Environment:** ${{ env.TARGET_ENV }}
            **Source Commit:** ${{ github.sha }}
            **Workflow Run:** ${{ github.run_id }}
            
            ### 📋 What's Being Promoted
            
            This PR promotes **all infrastructure files** from ${{ env.SOURCE_ENV }} to ${{ env.TARGET_ENV }}:
            
            ✅ **Included:**
            - `main.tf` - Infrastructure module definitions
            - `variables.tf` - Variable definitions  
            - `outputs.tf` - Output definitions
            - `dev-terraform.tfvars` - Development environment configuration
            - `staging-terraform.tfvars` - Staging environment configuration
            - `prod-terraform.tfvars` - Production environment configuration
            - `userdata-*.sh` - Server initialization scripts
            - All other infrastructure files
            
            ### 🎯 Deployment Configuration
            
            When this PR is merged, the ${{ env.TARGET_ENV }} environment will deploy using:
            - **Tfvars file:** `${{ env.TARGET_ENV }}-terraform.tfvars`
            - **Infrastructure code:** Latest from ${{ env.SOURCE_ENV }}
            
            ### 🔍 Review Checklist
            
            - [ ] Infrastructure code changes look correct
            - [ ] ${{ env.TARGET_ENV }}-terraform.tfvars has appropriate configuration for ${{ env.TARGET_ENV }}
            - [ ] All environment-specific tfvars files are present
            - [ ] Ready to deploy to ${{ env.TARGET_ENV }} environment
            
            ### 🚀 Next Steps
            
            1. **Review** all infrastructure changes
            2. **Verify** that `${{ env.TARGET_ENV }}-terraform.tfvars` has correct values for ${{ env.TARGET_ENV }}
            3. **Approve and merge** to trigger ${{ env.TARGET_ENV }} deployment
            
            ### ✅ Deployment Status
            
            - ✅ ${{ env.SOURCE_ENV }} deployment completed successfully (using `${{ env.SOURCE_ENV }}-terraform.tfvars`)
            - ⏳ Ready for ${{ env.TARGET_ENV }} deployment (will use `${{ env.TARGET_ENV }}-terraform.tfvars`)
            
            ---
            *This PR was created automatically by the GitOps promotion workflow.*
            *The ${{ env.TARGET_ENV }} deployment will use `${{ env.TARGET_ENV }}-terraform.tfvars` for environment-specific configuration.*
          labels: |
            promotion
            ${{ env.TARGET_ENV }}
            infrastructure-code
            automated
          assignees: ${{ secrets.DEFAULT_REVIEWERS }}
          reviewers: ${{ secrets.DEFAULT_REVIEWERS }}

      - name: Create notification issue if no changes
        if: env.SKIP_PR == 'true'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}
          issue-number: ${{ github.event.number || github.run_id }}
          body: |
            ## 📋 Promotion Status: No Infrastructure Changes
            
            **Source:** ${{ env.SOURCE_ENV }} → **Target:** ${{ env.TARGET_ENV }}
            
            ✅ ${{ env.SOURCE_ENV }} deployment completed successfully
            ℹ️ No infrastructure code changes detected for promotion
            
            The ${{ env.TARGET_ENV }} environment already has the latest infrastructure code.
            Environment-specific configurations remain unchanged.

  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [detect-environment, terraform-pipeline, promote-environment]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 GitOps Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.detect-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment status
          if [[ "${{ needs.terraform-pipeline.result }}" == "success" ]]; then
            echo "✅ **Deployment**: Completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.terraform-pipeline.result }}" == "skipped" ]]; then
            echo "⏭️ **Deployment**: Skipped (no deployment needed)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.terraform-pipeline.result }}" == "failure" ]]; then
            echo "❌ **Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Promotion status
          if [[ "${{ needs.promote-environment.result }}" == "success" ]]; then
            echo "✅ **Promotion**: PR created for ${{ needs.detect-environment.outputs.promotion_target }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.promote-environment.result }}" == "skipped" ]]; then
            echo "⏭️ **Promotion**: No promotion target configured" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.promote-environment.result }}" == "failure" ]]; then
            echo "❌ **Promotion**: Failed to create promotion PR" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Approval Required**: ${{ needs.detect-environment.outputs.require_pr_approval }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Approval Required**: ${{ needs.detect-environment.outputs.require_terraform_approval }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto Deploy**: ${{ needs.detect-environment.outputs.auto_deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Promotion Target**: ${{ needs.detect-environment.outputs.promotion_target }}" >> $GITHUB_STEP_SUMMARY